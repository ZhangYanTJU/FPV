\documentclass[12pt]{amsart}
% Figures within a column...
\makeatletter
\newenvironment{tablehere}
{\def\@captype{table}}
{}
\newenvironment{figurehere}
{\def\@captype{figure}}
{}
\makeatother
% \begin{figurehere}
% \centering
% \resizebox{\columnwidth}{!}{\includegraphics{gf-graphs.eps}}
% \caption{\label{gf-graphs}Graph showing applied RF frequency against magnetic field from the sweep coils, the gradient of the lines reveals information about $g_f$ for each isotope. The left gradient, corresponding to \chem{^{85}{Rb}} is $7.73 \times 10^9 (\pm 1.5 \times 10^8)$.  The right gradient, corresponding to \chem{^{87}{Rb}}, is $5.24 \times 10^9 (\pm 6.00 \times 10^7)$ }
% \end{figurehere}

\usepackage{geometry}
\usepackage{listings}
\usepackage{url}
\usepackage{epstopdf}
% \begin{lstlisting}[language=C,frame=single]
% CODE GOES HERE
% \end{lstlisting}
\usepackage{multicol}
%\begin{multicols}{# columns}, then \end{multicols}
\usepackage{graphicx}
\usepackage{subfigure}
\usepackage{verbatim}
\usepackage{mcode}
	%\begin{figure}[htbp!]
	%	\label{ffigure name}
	%	\subfigure[comment under figure]{\includegraphics[scale=.3]{image file}}
	%	\caption{figure caption}
	%\end{figure}
%\usepackage{movie15}
%\includemovie[poster,controls,text={\small(video)}]{6cm}{6cm}{movie file.avi/mpg/mpeg4}
%\usepackage{hyperref}

\title{Generating a Turbulent Boundary Layer Inflow Profile for JOE}
\author{Michael Emory}
\date{\today}

%%% BEGIN DOCUMENT
\begin{document}

\maketitle
\tableofcontents
%You can also add extra lines to the ToC or to force extra unnumbered section headings to be included. For example, if you wanted to add an entry called Preface, and you didn't want the Preface to be numbered, you'd use these commands:
%\section*{Preface}
%\addcontentsline{toc}{subsection}{Preface}
\newpage

\section{Introduction}
\begin{figure}[h!]
 \includegraphics[scale=.7]{/home/memory/Pictures/flatplate_SST/Blayer_image.eps}
\end{figure}


Many of the simulations being performed using JOE require turbulent inflow profiles.  The particular boundary condition file will need to include different quantities of interest depending on which turbulence model is used ($k$, $\epsilon$, $\omega$, $\nu_{SA}$, etc).  For simulations where the inflow condition is a turbulent boundary layer this document describes a procedure by which you can generate an appropriate boundary condition file for JOE.  The method can be explained in a few simple steps:
\begin{enumerate}
 \item generate laminar profile using Olaf's code for desired conditions (Mach, T, $\mu_\infty$, etc)
 \item build flat plate grid (JOE will read .msh, .cas, etc), making sure same distribution of Y values is maintained for all X values
 \item run JOE using laminar profile and flat plate grid until a converged solution is reached
 \item use provided Matlab script to evaluate and extract desired turbulent boundary layer profile
\end{enumerate}
This essentially starts the flat plate at the beginning of the domain, and then transition occurs to a turbulent boundary layer, after which a turbulent boundary layer will then grow.  Based on your desired criteria at the inflow ($\delta_{99\%}$, $RE_\theta$, etc) the profile is cut and a 2-D inflow profile is generated.  Sample code is provided for reading and using the generated profile in your joe.cpp file.
\newpage

\begin{multicols}{2}
\section{Generate Laminar Profile}
This section will explain how to use Olaf Marxen's laminar boundary layer code to generate an inlet profile for the flat plate simulation.  (help from Rene, Simon, or Olaf?)

\section{Flat Plate Simulation}
\begin{figurehere}
 \resizebox{180px}{!}{\includegraphics[scale=0.8]{/home/memory/Pictures/flatplate_SST/Blayer_mesh.eps}}
 \caption{X and Y are not the same scale}
 \label{fig:mesh}
\end{figurehere}

\subsection{Generate a Grid}
Using your grid generation technique of choice, a rectangular grid must be generated.  Keeping in mind that the laminar BL must transition then grow into the correct size of turbulent BL, the grid must be approx. 3 $\delta$ in height and 10 $\delta$ in length.  It is highly recommended to use the Y coordinates from the mesh of your end-goal simulation as the Y values of the plate.  The X values should be reasonable in size (100-200) points along the plate, having a smaller spacing near the beginning of the domain where transition will occur, as in Fig. \ref{fig:mesh}.  Do not worry about the details of the size of the mesh, there are commands within JOE to scale the Y and X coordinates if the original grid is not optimal.
\\ \\
\begin{tablehere}
\resizebox{\columnwidth}{!}{
 \begin{tabular}{|c|}
  \hline
 NOTE: \\
 make sure all Y value distributions \\ are the same for each X location \\
 \hline
\end{tabular}
}
\end{tablehere} 

\subsection{Running JOE for the Flat Plate}
The joe.cpp file found in this folder can be used to run the flat plate for different turbulence models, the one we will be using as our example is the $k-\omega$ SST of Menter (1994).  Looking at line 547 (Fig. \ref{fig:arg}) you will see that in order to run JOE with the correct turbulence model you must use an argument declared after the execution call, in our case we will run joe using:\\
\begin{tablehere}
\resizebox{140px}{!}{
 \begin{tabular}{|c|}
  \hline
 \$ mpirun -np 4 ./joe 2 \\
 \hline
\end{tabular}
}
\end{tablehere} \\
The current file should be set up to read in laminar profile's exported by Olaf's code, with one simple manipulation.  The first line of the laminar inlet file must be changed from variable listings to \emph{n=\# d=\#}, where n is the total number of points, and d is the number of variables in the profile.  The variables typically found in the laminar profile are: X, Y, Z, $P$, $\rho$, u, v, and w.  These values are read in to JOE in the initial Hook() routine shown in Fig. \ref{fig:lamin}.  If you have different variables this portion of code must be edited.  We typically assign the following boundary conditions for the flow, which are specified in the Joe.in file:
\begin{description}
 \item[outlet] the back and top of the domain are set to NEUMANN
 \item[sides] the spanwise side walls are set as SYMMETRY planes
 \item[inlet] this is set to a HOOK condition, where HOOK refers to the code in boundaryHook()
 \item[wall] the bottom surface is set to WALL, with either an adiabatic or isothermal condition
\end{description}

\subsection{Initial Values for Turbulent Quantities}
In the Joe.in file the user must specify initial values for certain turbulence parameters (depending on the turbulence model being used).  The methods described at the CFD-online Wiki\footnote{\url{http://www.cfd-online.com/Wiki/Turbulence_free-stream_boundary_conditions}}
are currently used in our simulations, it is up to the user to determine their own values based on the simulation being run and available information.  The user defined variables of turbulence intensity (I) and viscosity ratio ($\nu_t / \nu_{lam}$) must be specified, we are using $I=0.001$ and $\nu_{ratio} = 1$.  

\section{Using the Matlab Script}
The file extractProfile.m is a Matlab script which reads the data output from the JOE simulation.  The file KOMSST\_profile.txt is generated by JOE and outputs certain variables for every cell in the domain.  Since JOE is an unstructured solver, the data is not written in an ij ordered format.  In order to sort and create structured data from this file, the Matlab script sorts first by X location, then Y location to build an ij data structure for each variable.  For this reason it is important to have the same Y values for each X value, otherwise the sorting algorithm may not work properly.  \\
\indent Running the script, the user can select what critical value to check in order to cut the profile (a desired $RE_{\theta}$, $\delta$, etc).  The turbulence model must also be selected.  The KOMSST\_profile.txt is then read in, and various measures of the boundary layer thickness are computed.  After data has been generated for each X location, the user is prompted for the cutoff value for the critical variable.  If the user specifies a value which is not in the current range of data, the user is shown the range of values and is prompted again.  If the value is within the range, the profile is exported in 'word'\_turb\_inlet.txt where 'word' describes the turbulence model used.
 \begin{figurehere}
  \resizebox{\columnwidth}{!}{\includegraphics[scale=0.9]{/home/memory/Pictures/flatplate_SST/graphs.eps}}
 \caption{sample graphical output from matlab script}
 \label{fig:graphs}
\end{figurehere}
\subsection{Graphs Provided}
It is important to make sure the slice you have extracted is from the fully developed turbulent boundary layer, and not from the transition region.  For this reason there are four graphs exported after selecting a slice, which show you the range of values and your slice location (in dashed red lines) for several measures of BL thickness.  If your slice is in the constant slope section of the plot, it means you are in the developed zone, see Fig. \ref{fig:graphs}.


\section{Troubleshooting}
\subsection{Profile not Correct Size}
This is either a problem with the laminar boundary layer size or length of domain issue.  There are flags built in to the Joe.in file which can help in both of these situations.  The first is a scaling of the laminar boundary layer, which will allow the user to increase/decrease the size of the laminar inlet profile.  This is done using the variable SCALE\_BL.  One must take caution not to scale the inflow too much, since the boundary layer will be represented by fewer and fewer grid points.  If you are scaling the boundary layer below the resolution of the mesh you have, you can scale the Y coordinates of the grid using SCALE\_MESH\_Y.  If the domain is too short and all you want to do is extend the domain so that the BL can grow to the correct size, use the variable SCALE\_MESH\_X, which allows you to stretch the X locations.  The user can customize the mesh modification by editing the transformMesh() routine (Fig. \ref{fig:trans}) or use the builtin scaling variables discussed above and specifying values for these in Joe.in.  Keep in mind that in order to do mesh transformation via Joe.in the flag TRANSFORM\_MESH must be present in the file.

\subsection{Matlab Script not reading KOMSST\_profile.txt Correctly}
This is most likely due to problems writing the data file when using multiple processors.  If running on one processor the file should be generated correctly.  As a workaround for multiprocessor simulations, run the simulation again for 0 iterations, using the last restart.out as the restart file 'RESTART=./restart.out', making sure to only run on one processor.  This should fix the KOMSST\_profile.txt file. \\
\indent other problems might arise from total number of variables being exported, and the number of header lines specified by the Matlab command importData().



\end{multicols}

\newpage
\section{Reference Code Chunks}

\begin{figure}[htbp!]
\begin{lstlisting}[language=C++,frame=single]
switch (run)
    {
    case 0:   joe = new PlateLaminar(inputFileName);    break;
    case 1:   joe = new PlateTurbSA(inputFileName);     break;
    case 2:   joe = new PlateTurbSST(inputFileName);    break;
    case 3:   joe = new PlateTurbWXKOM(inputFileName);    break;
\end{lstlisting}
\caption{arguments to specify turbulence model}
\label{fig:arg}
\end{figure} 

\begin{figure}[htbp!]
\begin{lstlisting}[language=C++,frame=single]
fscanf(fp, "n=%d\td=%d", &npos, &nval);
    getMem2D(&boundVal1, 0, npos-1, 0, nval-1, "boundVal1");

    // file has values
    // x, y, z,press, rho, u, v, w
    for (int i=0; i<npos; i++)
    {
      for (int v=0; v<nval; v++)
      {
        fscanf(fp, "%lf", &boundVal1[i][v]);
        if (v==1)
	  boundVal1[i][v] *= fakt_bl;
        
	printf("%.6le\t", boundVal1[i][v]);
      }
      printf("\n");
    }
\end{lstlisting}
\caption{initialHook() code which reads laminar inlet profile}
\label{fig:lamin}
\end{figure}

\begin{figure}[htbp!]
\begin{lstlisting}[language=C++,frame=single]
 void transformMeshHook()
  {
	if (!checkParam("TRANSFORM_MESH")) return;
	double scale_mesh_X = getDoubleParam("SCALE_MESH_X", "1.0");
	double scale_mesh_Y = getDoubleParam("SCALE_MESH_Y", "1.0");
	for (int ino = 0; ino < getNno(); ++ino)
	{	
		x_no[ino][0] *= scale_mesh_X;
		x_no[ino][1] *= scale_mesh_Y;
	}
		
		
	// clearFlag for wall distance to recompute the wallDist when mesh deformed
	DoubleScalar *wallD = getScalarData("wallDist");
	wallD->clearFlag();
  }
\end{lstlisting}
\caption{transformMesh() routine to scale mesh}
\label{fig:trans}
\end{figure}
%To include the references/works cited/bibliography in your Table of Contents, right before the bibliography command, use the command:
%\addcontentsline{toc}{section}{References}
%\begin{thebibliography}{01}
%\bibitem{ref:} Iaccarino, G., Pecnik, R., Glimm, J. \& Sharp, D., 2009 A QMU approach for characterizing the operability limits of air-breathing hypersonic vehicles. \emph{CMAME} preprint submitted March 18, 2009.
%\end{thebibliography}


\end{document}